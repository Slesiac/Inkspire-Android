-- TABLES

create table public.user_profile (
  id uuid not null,
  username text not null,
  profile_pic text null,
  bio text null,
  constraint user_profile_pkey primary key (id),
  constraint user_profile_username_key unique (username),
  constraint user_profile_id_fkey foreign KEY (id)
             references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;


create table public.challenge (
  id serial not null,
  user_profile_id uuid not null,
  title text not null,
  concept text not null,
  art_constraint text not null,
  description text null,
  result_pic text null,
  inserted_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint challenge_pkey primary key (id),
  constraint challenge_user_profile_id_fkey foreign KEY (user_profile_id)
             references user_profile (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger set_updated_at_challenge BEFORE
update on challenge for EACH row
execute FUNCTION update_updated_at_column ();


create table public.concept (
  id serial not null,
  concept text not null,
  constraint subject_pkey primary key (id),
  constraint subject_subject_key unique (concept)
) TABLESPACE pg_default;


create table public.art_constraint (
  id serial not null,
  art_constraint text not null,
  constraint challenge_constraint_pkey primary key (id),
  constraint challenge_constraint_challenge_constraint_key unique (art_constraint)
) TABLESPACE pg_default;


-- VIEWS

create view challenge_vw as
select
  c.id,
  u.id as user_id,
  c.title,
  c.concept,
  c.art_constraint,
  c.description,
  c.result_pic,
  c.inserted_at,
  c.updated_at,
  u.username,
  u.profile_pic,
  u.bio
  from challenge c
  join user_profile u
    on c.user_profile_id = u.id


create view user_profile_vw as
select
  u.id,
  u.username,
  u.profile_pic,
  u.bio,
  count(c.id) as created_count,
  count(c.result_pic) filter (where c.result_pic is not null) as completed_count
from user_profile u
left join challenge c
  on c.user_profile_id = u.id
group by
  u.id,
  u.username,
  u.profile_pic,
  u.bio;


-- TABLES POLICIES

alter policy "Allow read access to challenge_constraint"
on "public"."art_constraint"
to public
using (true);

alter policy "Authenticated can read all challenges"
on "public"."challenge"
to authenticated
using (true);

alter policy "Users can delete their own challenge"
on "public"."challenge"
to authenticated
using (user_profile_id = auth.uid());

alter policy "Users can insert their own challenge"
on "public"."challenge"
to authenticated
with check (user_profile_id = auth.uid());

alter policy "Users can update their own challenge"
on "public"."challenge"
to authenticated
using (user_profile_id = auth.uid())
with check (user_pr);

alter policy "Allow read access to subject"
on "public"."concept"
to public
using (true);

alter policy "Anyone can read all profiles"
on "public"."user_profile"
to public
using (true);

alter policy "Users can insert their own profile"
on "public"."user_profile"
to public
with check (auth.uid() = id);

alter policy "Users can update their own profile"
on "public"."user_profile"
to public
using (auth.uid() = id)
with check (auth.ui);


-- STORAGE POLICIES

alter policy "Allow read authenticated 97k0nn_0"
on "storage"."objects"
to authenticated
using (true);

alter policy "Allow upload authenticated 97k0nn_0"
on "storage"."objects"
to authenticated
with check (true);